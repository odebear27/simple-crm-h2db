JPA with H2

What is H2?
- In memory relational database
- lightweight
- for quick prototyping
- useful for demo a sample backend app as your portfolio
- note data is lost when you restart the application

What is JPA and Hibernate?

Java Persistence API - specification for persisting, reading, managing data from your Java objects to your DB.

Object Relational Mapper (ORM)

Install H2 and JPA

Controller -> Service -> Repository -> DB
Step 1: Annotate Customer class with @Entity, also define column names
Step 2: Define the primary key, which is id and made it autogenerate
Step 3: Setup Repository

We need a repo to interact with SQL DB

Step 4: Update our Service layer




Customers
Interactions

private int id;
private String remarks;
private LocalDate interactionDate; "2023-06-01"

Create the Entity, Repository, Service, Controller
Test CRUD endpoints

Step 1: Create the Entity (Remember to generate our Getters and Setters)
Step 2: Create InteractionRepository interface 
Step 3: Create our InteractionService interface
Step 4: Create our InteractionServiceImpl implementation
Step 5: Create our interaction controller

Test your endpoints and check your H2 DB if it is updated



MANY TO ONE RELATIONSHIP


MANY students work on ONE project
MANY products are sold by ONE store
MANY interactions are made with ONE customer

How to we know who the interactions belong to? We use a Foreign Key -> It references the Primary Key in the Customer table.
PK of customer identifies every customer
PK of interaction identifies each interaction
FK of interaction identitfies the PK of the customer

How do we tell JPA?

Nested routes
POST localhost:8080/customers/:id/interactions
POST localhost:8080/customers/1/interactions

1. Define signature inside CustomerService
2. Implement the method inside CustomerServiceImpl
3. Implement the method inside CustomerController

POST localhost:8080/customers/1/interactions
POST to your nested routes
CustomerController will get the request
CustomerController will call CustomerService
CustomerService will use CustomerRepository to find the customer by id
CustomerService will call InteractionService to create the interaction